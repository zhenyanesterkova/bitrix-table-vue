{"version":3,"file":"table.bundle.js","sources":["../src/TestSource.js","../src/mixins/Filterable.js","../src/mixins/Sortable.js","../src/mixins/Paginable.js","../src/mixins/InfScrollable.js","../src/mixins/virtualScrollable.js","../src/table.js"],"sourcesContent":["let worker;\nif (window.Worker) {\n    worker = new Worker(\"data-worker.js\");\n}\n\nfunction updateDataWithoutDebounce(data) {\n    // В реальном проекте здесь будет обращение к API,\n    // у меня здесь ображение к тестовому Web Worker'у\n    worker.onmessage = function (e) {\n        \n        data.rows = data.rows.concat(e.data.rows);\n        data.totalPages = data.pageSize ? Math.ceil(e.data.length / data.pageSize) : 1;\n        data.bottomLoader = false;\n    }\n    let startIndex;\n    let endIndex;\n\n    if (data.infScrollable) {\n        startIndex = data.rows.length;\n        endIndex = startIndex ? startIndex + data.infScrollStepSize : data.infScrollStartSize;\n    } else if (data.paginable) {\n        startIndex = data.pageSize * (data.pageNumber - 1);\n        endIndex = startIndex + data.pageSize;\n    }\n\n    const message = {\n        sorts: data.sorts,\n        sortsOrder: data.sortsOrder,\n        filters: data.filters,\n        startIndex,\n        endIndex,\n    };\n   \n    worker.postMessage(message);\n}\n\nlet timeout;\n\nexport function updateData(data, clear) {\n    \n    data.bottomLoader = true;\n    if (clear) {\n        data.rows = [];\n    }\n\n    if (timeout) {\n        clearTimeout(timeout);\n        timeout = null;\n    }\n\n    timeout = setTimeout(() => {\n        updateDataWithoutDebounce(data);\n    }, 1000);\n}","import Vue from \"vue\"\n\nexport default {\n    data() {\n        return {\n            filterable: true,\n            filters: {},\n        };\n    },\n    methods: {\n        updateFilters({ filter, column }) {\n            Vue.delete(this.filters, column);\n            if (filter) {\n                Vue.set(this.filters, column, filter);\n            }\n        }\n    },\n    watch: {\n        filters() {\n            if (this.paginable) {\n                this.pageNumber = 1;\n            }\n            if (this.updateData instanceof Function) {\n                this.updateData();\n            }\n        },\n    },\n}","import Vue from \"vue\"\n\nexport default {\n    data() {\n        return {\n            sortable: true,\n            sorts: {},\n            sortsOrder: [],\n        };\n    },\n    methods: {\n        updateSorts({ sort, column }) {\n            if (sort === \"no\") {\n                if (column in this.sorts) {\n                    Vue.delete(this.sorts, column);\n                    Vue.delete(this.sortsOrder, this.sortsOrder.indexOf(column));\n                }\n            } else {\n                if (!(column in this.sorts)) {\n                    this.sortsOrder.push(column);\n                } else {\n                    Vue.delete(this.sorts, column);\n                }\n                Vue.set(this.sorts, column, sort);\n            }\n        }\n    },\n    watch: {\n        sorts() {\n            if (this.paginable) {\n                this.pageNumber = 1;\n            }\n            if (this.updateData instanceof Function) {\n                this.updateData();\n            }\n        },\n        sortsOrger() {\n            if (this.paginable) {\n                this.pageNumber = 1;\n            }\n            if (this.updateData instanceof Function) {\n                this.updateData();\n            }\n        },\n    },\n}","export default {\n    data() {\n        return {\n            paginable: true,\n            pageSize: 0,\n            pageNumber: 1,\n        }\n    },\n    methods: {\n        updatePagination({ pageSize, pageNumber }) {\n            this.pageSize = pageSize;\n            this.pageNumber = pageNumber;\n        },\n    },\n    watch: {\n        pageSize() {\n            if (this.updateData instanceof Function) {\n                this.updateData();\n            }\n        },\n        pageNumber() {\n            if (this.updateData instanceof Function) {\n                this.updateData();\n            }\n        },\n    },\n}","export default {\n    data() {\n        return {\n            infScrollable: true,\n\n            infScrollViewportHeight: 0,\n            infScrollBottomPosition: 0,\n        };\n    },\n    created() {\n        this.infScrollUpdateViewportHeight();\n        this.infScrollUpdateCurrentPosition();\n        window.addEventListener(\"resize\", this.infScrollUpdateViewportHeight);\n        window.addEventListener(\"scroll\", this.infScrollUpdateCurrentPosition);\n        if (this.infScrollable) {\n            this.infScrollBottomAnchor = document.querySelector(\"#infScrollBottomAnchor\");\n            this.infScrollUpdateBottomPosition();\n            window.addEventListener(\"resize\", this.infScrollUpdateBottomPosition);\n        }\n    },\n    unmounted() {\n        window.removeEventListener(\"resize\", this.infScrollUpdateViewportHeight);\n        window.removeEventListener(\"scroll\", this.infScrollUpdateCurrentPosition);\n        if (this.infScrollable) {\n            window.removeEventListener(\"resize\", this.infScrollUpdateBottomPosition);\n        }\n    },\n    methods: {\n        infScrollUpdateViewportHeight() {\n            this.infScrollViewportHeight = document.documentElement.clientHeight;\n        },\n        infScrollUpdateBottomPosition() {\n            this.infScrollBottomPosition = this.infScrollBottomAnchor.getBoundingClientRect().top + window.pageYOffset;\n        },\n        infScrollUpdateCurrentPosition() {\n            const currentPosition = window.pageYOffset;\n            const viewportHeight = this.infScrollViewportHeight;\n            const bottomPosition = this.infScrollBottomPosition;\n            const triggerOffset = this.infScrollTriggerOffset;\n\n            if ((bottomPosition - currentPosition - viewportHeight) < triggerOffset) {\n                this.updateData(true);\n            }\n        },\n    },\n    watch: {\n        infScrollable() {\n            if (this.infScrollable) {\n                this.$nextTick(() => {\n                    this.infScrollBottomAnchor = document.querySelector(\"#infScrollBottomAnchor\");\n                    this.infScrollUpdateBottomPosition();\n                    window.addEventListener(\"resize\", this.infScrollUpdateBottomPosition);\n                });\n            } else {\n                window.removeEventListener(\"resize\", this.infScrollUpdateBottomPosition);\n            }\n        },\n        rows() {\n            if (this.infScrollable) {\n                this.$nextTick(() => {\n                    this.infScrollUpdateBottomPosition();\n                });\n            }\n        }\n    },\n}\n","export default {\n    data() {\n        return {\n            virtualScrollable: true,\n\n            virtualScrollViewportHeight: 0,\n            virtualScrollStartPosition: 0,\n            virtualScrollCurrentPosition: 0,\n        };\n    },\n    created() {\n        this.virtualScrollUpdateViewportHeight();\n        this.virtualScrollUpdateCurrentPosition();\n        window.addEventListener(\"resize\", this.virtualScrollUpdateViewportHeight);\n        window.addEventListener(\"scroll\", this.virtualScrollUpdateCurrentPosition);\n        if (this.virtualScrollable) {\n            this.virtualScrollTopFiller = document.querySelector(\"#virtualScrollTopFiller\");\n            this.virtualScrollBottomFiller = document.querySelector(\"#virtualScrollBottomFiller\");\n            this.virtualScrollUpdateStartPosition();\n            window.addEventListener(\"resize\", this.virtualScrollUpdateStartPosition);\n        }\n    },\n    unmounted() {\n        window.removeEventListener(\"resize\", this.virtualScrollUpdateViewportHeight);\n        window.removeEventListener(\"scroll\", this.virtualScrollUpdateCurrentPosition);\n        if (this.virtualScrollable) {\n            window.removeEventListener(\"resize\", this.virtualScrollUpdateStartPosition);\n        }\n    },\n    computed: {\n        virtualScrollListSize() {\n            const rowHeight = this.virtualScrollRowHeight;\n            return rowHeight * this.rows.length;\n        },\n        virtualScrollListPosition() {\n            const currentPosition = this.virtualScrollCurrentPosition;\n            const startPosition = this.virtualScrollStartPosition;\n            return currentPosition - startPosition;\n        },\n        virtualScrollTopFillerCount() {\n            const listPosition = this.virtualScrollListPosition;\n            const rowHeight = this.virtualScrollRowHeight;\n            const bufferSize = this.virtualScrollBufferSize;\n            const topFilterCount = Math.floor(listPosition / rowHeight) - bufferSize;\n            return topFilterCount > 0 ? topFilterCount : 0;\n        },\n        virtualScrollViewportCount() {\n            const rowHeight = this.virtualScrollRowHeight;\n            const bufferSize = this.virtualScrollBufferSize;\n            const viewportHeight = this.virtualScrollViewportHeight;\n            return Math.ceil(viewportHeight / rowHeight) + 2 * bufferSize;\n        },\n        virtualScrollBottomFillerCount() {\n            const topFillerCount = this.virtualScrollTopFillerCount;\n            const viewportCount = this.virtualScrollViewportCount;\n            const bottomFilterCount = this.rows.length - topFillerCount - viewportCount;\n            return bottomFilterCount > 0 ? bottomFilterCount : 0;\n        },\n        virtualScrollTopFillerSize() {\n            const topFillerCount = this.virtualScrollTopFillerCount;\n            const rowHeight = this.virtualScrollRowHeight;\n            return topFillerCount * rowHeight;\n        },\n        virtualScrollBottomFillerSize() {\n            const bottomFillerCount = this.virtualScrollBottomFillerCount;\n            const rowHeight = this.virtualScrollRowHeight;\n            return bottomFillerCount * rowHeight;\n        },\n        virtualScrollRows() {\n            const topFillerCount = this.virtualScrollTopFillerCount;\n            const viewportCount = this.virtualScrollViewportCount;\n            return this.rows.slice(topFillerCount, topFillerCount + viewportCount);\n        },\n    },\n    methods: {\n        virtualScrollUpdateViewportHeight() {\n            this.virtualScrollViewportHeight = document.documentElement.clientHeight;\n        },\n        virtualScrollUpdateStartPosition() {\n            this.virtualScrollStartPosition = this.virtualScrollTopFiller.getBoundingClientRect().top + window.pageYOffset;\n        },\n        virtualScrollUpdateCurrentPosition() {\n            this.virtualScrollCurrentPosition = window.pageYOffset;\n        },\n        virtualScrollGetKey(row, index) {\n            const topFillerCount = this.virtualScrollTopFillerCount;\n            const viewportCount = this.virtualScrollViewportCount;\n            return (index + topFillerCount) % viewportCount;\n        }\n    },\n    watch: {\n        virtualScrollable() {\n            if (this.virtualScrollable) {\n                this.$nextTick(() => {\n                    this.virtualScrollTopFiller = document.querySelector(\"#virtualScrollTopFiller\");\n                    this.virtualScrollBottomFiller = document.querySelector(\"#virtualScrollBottomFiller\");\n                    this.virtualScrollUpdateStartPosition();\n                    window.addEventListener(\"resize\", this.virtualScrollUpdateStartPosition);\n                });\n            } else {\n                window.removeEventListener(\"resize\", this.virtualScrollUpdateStartPosition);\n            }\n        },\n    },\n}","import {Vue} from 'ui.vue';\n \n import {TableLoader} from \"denvic.table.loader\";\n import {Filter} from \"denvic.table.filters\";\n import {SwitchSorter} from \"denvic.table.sorters\";\n import { updateData } from \"./TestSource\";\n import {MyTableHead} from \"denvic.table.table-head\";\n import {Paginator} from \"denvic.table.paginators\";\n import {VueTable} from \"denvic.table.vue-table\";\n import Filterable from \"./mixins/Filterable\";\nimport Sortable from \"./mixins/Sortable\";\nimport Paginable from \"./mixins/Paginable\";\nimport InfScrollable from \"./mixins/InfScrollable\";\nimport virtualScrollable from \"./mixins/virtualScrollable\";\n\nVue.component('bx-table', {\n\ttemplate: `\n\t\t<div>\n\t\t\t<div>\n\t\t\t\tИспользовать бесконечный скролл\n\t\t\t\t<input\n\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\tv-model=\"infScrollable\"\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\tИспользовать виртуальный скролл\n\t\t\t\t<input\n\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\tv-model=\"virtualScrollable\"\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<bx-paginators\n\t\t\t\tv-if=\"!infScrollable\"\n\t\t\t\tv-bind:pageSize=\"pageSize\"\n\t\t\t\tv-bind:pageNumber=\"pageNumber\"\n\t\t\t\tv-bind:totalPages=\"totalPages\"\n\t\t\t\t@paginate=\"updatePagination($event)\"\n\t\t\t/>\n\t\t\t<bx-vue-table\n\t\t\t\tv-bind:rows=\"computedRows\"\n\t\t\t\tv-bind:columns=\"columns\"\n\t\t\t\tv-bind:columnsHeads=\"columnsHeads\"\n\t\t\t\tv-bind:getKey=\"computedGetKey\"\n\t\t\t\tv-bind:defaultHeadClass=\"{ ['table-head']: true }\"\n\t\t\t\tv-bind:defaultCellClass=\"{ ['table-cell']: true }\"\n\t\t\t\tv-bind:useVirtualScroll=\"virtualScrollable\"\n\t\t\t\tv-bind:virtualScrollHeight=\"20\"\n\t\t\t\tv-bind:virtualScrollCount=\"25\"\n\t\t\t\tclass=\"table\"\n\t\t\t>\n\t\t\t\t<template v-if=\"virtualScrollable\" v-slot:start-tbody>\n\t\t\t\t\t<tr\n\t\t\t\t\t\tv-bind:colspan=\"rowSize\"\n\t\t\t\t\t\tid=\"virtualScrollTopFiller\"\n\t\t\t\t\t\tv-bind:style=\"{height: virtualScrollTopFillerSize + 'px'}\"\n\t\t\t\t\t/>\n\t\t\t\t</template>\n\n\t\t\t\t<template v-for=\"column in columns\" v-slot:column + '-head'=\"{ head }\">\n\t\t\t\t\t<bx-table-head v-bind:head=\"head\" v-bind:key=\"column\">\n\t\t\t\t\t\t<template v-slot:sorter\n\t\t\t\t\t\t\t><bx-sorters\n\t\t\t\t\t\t\t\tv-bind:sort=\"sorts[column]\"\n\t\t\t\t\t\t\t\tv-bind:column=\"column\"\n\t\t\t\t\t\t\t\tv-bind:index=\"sortsIndexes[column]\"\n\t\t\t\t\t\t\t\t@sort=\"updateSorts($event)\"\n\t\t\t\t\t\t/></template>\n\t\t\t\t\t\t<template v-slot:filter\n\t\t\t\t\t\t\t><bx-filters\n\t\t\t\t\t\t\t\tv-bind:is=\"filtersComponents[column]\"\n\t\t\t\t\t\t\t\tv-bind:filter=\"filters[column]\"\n\t\t\t\t\t\t\t\tv-bind:column=\"column\"\n\t\t\t\t\t\t\t\tv-bind:type=\"filtersTypes[column]\"\n\t\t\t\t\t\t\t\t@filter=\"updateFilters($event)\"\n\t\t\t\t\t\t/></template>\n\t\t\t\t\t</my-table-head>\n\t\t\t\t</template>\n\t\t\t</bx-vue-table>\n\n\t\t\t<bx-paginators\n\t\t\t\tv-if=\"!infScrollable\"\n\t\t\t\tv-bind:pageSize=\"pageSize\"\n\t\t\t\tv-bind:pageNumber=\"pageNumber\"\n\t\t\t\tv-bind:totalPages=\"totalPages\"\n\t\t\t\t@paginate=\"updatePagination($event)\"\n\t\t\t/>\n\t\t</div>\n\t`,\n\tdata() {\n\t\treturn {\n\t\t  \trows: [],\n\t\t\t\n\t\t  \tcolumns: [\"id\", \"age\", \"name\", \"login\", \"email\"],\n\t\t  \tcolumnsHeads: {\n\t\t\t\tid: \"ID\",\n\t\t\t\tage: \"Возраст\",\n\t\t\t\tname: \"Имя\",\n\t\t\t\tlogin: \"Логин\",\n\t\t\t\temail: \"EMail\",\n\t\t  \t},\n\t\t  \n\t\t  \tfiltersTypes: {\n\t\t\t\tid: \"number\",\n\t\t\t\tage: \"number\",\n\t\t\t\tname: \"text\",\n\t\t\t\tlogin: \"text\",\n\t\t\t\temail: \"text\",\n\t\t  \t},\n\t\t  \tfiltersComponents: {\n\t\t\t\tid: 'bx-filters',\n\t\t\t\tage: 'bx-filters',\n\t\t\t\tname: 'bx-filters',\n\t\t\t\tlogin: 'bx-filters',\n\t\t\t\temail: 'bx-filters',\n\t\t  \t},\n\t\t  \n\t\t  \tbottomLoader: false,\n\t\t  \n\t\t  \tpageSize: 20,\n\t\t  \ttotalPages: 0,\n\t\t  \n\t\t  \tinfScrollable: false,\n\t\t  \tinfScrollStartSize: 100,\n\t\t  \tinfScrollStepSize: 50,\n\t\t  \tinfScrollTriggerOffset: 1000,\n\t\t  \n\t\t  \tvirtualScrollable: false,\n\t\t  \tvirtualScrollBufferSize: 10,\n\t\t  \tvirtualScrollRowHeight: 20,\n\t\t};\n\t},\n\tcomputed: {\n\t\trowSize() {\n\t\t\treturn this.columns.length;\n\t\t},\n\t\tsortsIndexes() {\n\t\t  \treturn this.sortsOrder.reduce((res, column, index) => {\n\t\t\t\tres[column] = index + 1;\n\t\t\t\treturn res;\n\t\t  \t}, {});\n\t\t},\n\t\tcomputedRows() {\n\t\t  \treturn this.virtualScrollable ? this.virtualScrollRows : this.rows;\n\t\t},\n\t\tcomputedGetKey() {\n\t\t  \treturn this.virtualScrollable ? this.virtualScrollGetKey : this.getKey;\n\t\t},\n\t\tgetKey(row) {\n\t\t  \treturn row.id;\n\t\t},\n\t},\n\tmethods: {\n\t\tupdateData(infScroll) {\n\t\t  \tupdateData(this, !infScroll);\n\t\t},\n\t},\n\tcreated() {\n\t\tthis.updateData();\n\t},\n\twatch: {\n\t\tinfScrollable() {\n\t\t  (this.paginable = !this.infScrollable), this.updateData();\n\t\t},\n\t},\n\tmixins: [Filterable, Sortable, Paginable, InfScrollable, virtualScrollable],\n})"],"names":["worker","timeout","updateData","data","clear","bottomLoader","rows","clearTimeout","setTimeout","startIndex","endIndex","onmessage","e","concat","totalPages","pageSize","Math","ceil","length","infScrollable","infScrollStepSize","infScrollStartSize","paginable","pageNumber","message","sorts","sortsOrder","filters","postMessage","updateDataWithoutDebounce","window","Worker","filterable","methods","updateFilters","filter","column","Vue","this","set","watch","Function","sortable","updateSorts","sort","indexOf","push","sortsOrger","updatePagination","infScrollViewportHeight","infScrollBottomPosition","created","infScrollUpdateViewportHeight","infScrollUpdateCurrentPosition","addEventListener","infScrollBottomAnchor","document","querySelector","infScrollUpdateBottomPosition","unmounted","removeEventListener","documentElement","clientHeight","getBoundingClientRect","top","pageYOffset","currentPosition","viewportHeight","infScrollTriggerOffset","$nextTick","_this","_this2","virtualScrollable","virtualScrollViewportHeight","virtualScrollStartPosition","virtualScrollCurrentPosition","virtualScrollUpdateViewportHeight","virtualScrollUpdateCurrentPosition","virtualScrollTopFiller","virtualScrollBottomFiller","virtualScrollUpdateStartPosition","computed","virtualScrollListSize","virtualScrollRowHeight","virtualScrollListPosition","virtualScrollTopFillerCount","listPosition","rowHeight","bufferSize","virtualScrollBufferSize","topFilterCount","floor","virtualScrollViewportCount","virtualScrollBottomFillerCount","topFillerCount","viewportCount","bottomFilterCount","virtualScrollTopFillerSize","virtualScrollBottomFillerSize","virtualScrollRows","slice","virtualScrollGetKey","row","index","component","template","columns","columnsHeads","id","age","name","login","email","filtersTypes","filtersComponents","rowSize","sortsIndexes","reduce","res","computedRows","computedGetKey","getKey","infScroll","mixins","Filterable","Sortable","Paginable","InfScrollable"],"mappings":"+FAAA,IAAIA,EAoCAC,EAEG,SAASC,EAAWC,EAAMC,GAE7BD,EAAKE,cAAe,EAChBD,IACAD,EAAKG,KAAO,IAGZL,IACAM,aAAaN,GACbA,EAAU,MAGdA,EAAUO,YAAW,YA7CzB,SAAmCL,OAS3BM,EACAC,EAPJV,EAAOW,UAAY,SAAUC,GAEzBT,EAAKG,KAAOH,EAAKG,KAAKO,OAAOD,EAAET,KAAKG,MACpCH,EAAKW,WAAaX,EAAKY,SAAWC,KAAKC,KAAKL,EAAET,KAAKe,OAASf,EAAKY,UAAY,EAC7EZ,EAAKE,cAAe,GAKpBF,EAAKgB,cAELT,GADAD,EAAaN,EAAKG,KAAKY,QACCT,EAAaN,EAAKiB,kBAAoBjB,EAAKkB,mBAC5DlB,EAAKmB,YAEZZ,GADAD,EAAaN,EAAKY,UAAYZ,EAAKoB,WAAa,IACxBpB,EAAKY,cAG3BS,EAAU,CACZC,MAAOtB,EAAKsB,MACZC,WAAYvB,EAAKuB,WACjBC,QAASxB,EAAKwB,QACdlB,WAAAA,EACAC,SAAAA,GAGJV,EAAO4B,YAAYJ,GAkBfK,CAA0B1B,KAC3B,kDAnDH2B,OAAOC,SACP/B,EAAS,IAAI+B,OAAO,yBCAT,CACX5B,sBACW,CACH6B,YAAY,EACZL,QAAS,KAGjBM,QAAS,CACLC,8BAAgBC,IAAAA,OAAQC,IAAAA,OACpBC,SAAWC,KAAKX,QAASS,GACrBD,GACAE,EAAIE,IAAID,KAAKX,QAASS,EAAQD,KAI1CK,MAAO,CACHb,mBACQW,KAAKhB,iBACAC,WAAa,GAElBe,KAAKpC,sBAAsBuC,eACtBvC,kBCrBN,CACXC,sBACW,CACHuC,UAAU,EACVjB,MAAO,GACPC,WAAY,KAGpBO,QAAS,CACLU,4BAAcC,IAAAA,KAAMR,IAAAA,OACH,OAATQ,EACIR,KAAUE,KAAKb,QACfY,SAAWC,KAAKb,MAAOW,GACvBC,SAAWC,KAAKZ,WAAYY,KAAKZ,WAAWmB,QAAQT,MAGlDA,KAAUE,KAAKb,MAGjBY,SAAWC,KAAKb,MAAOW,QAFlBV,WAAWoB,KAAKV,GAIzBC,EAAIE,IAAID,KAAKb,MAAOW,EAAQQ,MAIxCJ,MAAO,CACHf,iBACQa,KAAKhB,iBACAC,WAAa,GAElBe,KAAKpC,sBAAsBuC,eACtBvC,cAGb6C,sBACQT,KAAKhB,iBACAC,WAAa,GAElBe,KAAKpC,sBAAsBuC,eACtBvC,kBCzCN,CACXC,sBACW,CACHmB,WAAW,EACXP,SAAU,EACVQ,WAAY,IAGpBU,QAAS,CACLe,iCAAmBjC,IAAAA,SAAUQ,IAAAA,gBACpBR,SAAWA,OACXQ,WAAaA,IAG1BiB,MAAO,CACHzB,oBACQuB,KAAKpC,sBAAsBuC,eACtBvC,cAGbqB,sBACQe,KAAKpC,sBAAsBuC,eACtBvC,kBCtBN,CACXC,sBACW,CACHgB,eAAe,EAEf8B,wBAAyB,EACzBC,wBAAyB,IAGjCC,wBACSC,qCACAC,iCACLvB,OAAOwB,iBAAiB,SAAUhB,KAAKc,+BACvCtB,OAAOwB,iBAAiB,SAAUhB,KAAKe,gCACnCf,KAAKnB,qBACAoC,sBAAwBC,SAASC,cAAc,+BAC/CC,gCACL5B,OAAOwB,iBAAiB,SAAUhB,KAAKoB,iCAG/CC,qBACI7B,OAAO8B,oBAAoB,SAAUtB,KAAKc,+BAC1CtB,OAAO8B,oBAAoB,SAAUtB,KAAKe,gCACtCf,KAAKnB,eACLW,OAAO8B,oBAAoB,SAAUtB,KAAKoB,gCAGlDzB,QAAS,CACLmB,8CACSH,wBAA0BO,SAASK,gBAAgBC,cAE5DJ,8CACSR,wBAA0BZ,KAAKiB,sBAAsBQ,wBAAwBC,IAAMlC,OAAOmC,aAEnGZ,8CACUa,EAAkBpC,OAAOmC,YACzBE,EAAiB7B,KAAKW,wBACLX,KAAKY,wBAGNgB,EAAkBC,EAFlB7B,KAAK8B,6BAGlBlE,YAAW,KAI5BsC,MAAO,CACHrB,oCACQmB,KAAKnB,mBACAkD,WAAU,WACXC,EAAKf,sBAAwBC,SAASC,cAAc,0BACpDa,EAAKZ,gCACL5B,OAAOwB,iBAAiB,SAAUgB,EAAKZ,kCAG3C5B,OAAO8B,oBAAoB,SAAUtB,KAAKoB,gCAGlDpD,2BACQgC,KAAKnB,oBACAkD,WAAU,WACXE,EAAKb,wCC5DV,CACXvD,sBACW,CACHqE,mBAAmB,EAEnBC,4BAA6B,EAC7BC,2BAA4B,EAC5BC,6BAA8B,IAGtCxB,wBACSyB,yCACAC,qCACL/C,OAAOwB,iBAAiB,SAAUhB,KAAKsC,mCACvC9C,OAAOwB,iBAAiB,SAAUhB,KAAKuC,oCACnCvC,KAAKkC,yBACAM,uBAAyBtB,SAASC,cAAc,gCAChDsB,0BAA4BvB,SAASC,cAAc,mCACnDuB,mCACLlD,OAAOwB,iBAAiB,SAAUhB,KAAK0C,oCAG/CrB,qBACI7B,OAAO8B,oBAAoB,SAAUtB,KAAKsC,mCAC1C9C,OAAO8B,oBAAoB,SAAUtB,KAAKuC,oCACtCvC,KAAKkC,mBACL1C,OAAO8B,oBAAoB,SAAUtB,KAAK0C,mCAGlDC,SAAU,CACNC,wCACsB5C,KAAK6C,uBACJ7C,KAAKhC,KAAKY,QAEjCkE,4CAC4B9C,KAAKqC,6BACPrC,KAAKoC,4BAG/BW,2CACUC,EAAehD,KAAK8C,0BACpBG,EAAYjD,KAAK6C,uBACjBK,EAAalD,KAAKmD,wBAClBC,EAAiB1E,KAAK2E,MAAML,EAAeC,GAAaC,SACvDE,EAAiB,EAAIA,EAAiB,GAEjDE,0CACUL,EAAYjD,KAAK6C,uBACjBK,EAAalD,KAAKmD,wBAClBtB,EAAiB7B,KAAKmC,mCACrBzD,KAAKC,KAAKkD,EAAiBoB,GAAa,EAAIC,GAEvDK,8CACUC,EAAiBxD,KAAK+C,4BACtBU,EAAgBzD,KAAKsD,2BACrBI,EAAoB1D,KAAKhC,KAAKY,OAAS4E,EAAiBC,SACvDC,EAAoB,EAAIA,EAAoB,GAEvDC,6CAC2B3D,KAAK+C,4BACV/C,KAAK6C,wBAG3Be,gDAC8B5D,KAAKuD,+BACbvD,KAAK6C,wBAG3BgB,iCACUL,EAAiBxD,KAAK+C,4BACtBU,EAAgBzD,KAAKsD,kCACpBtD,KAAKhC,KAAK8F,MAAMN,EAAgBA,EAAiBC,KAGhE9D,QAAS,CACL2C,kDACSH,4BAA8BjB,SAASK,gBAAgBC,cAEhEkB,iDACSN,2BAA6BpC,KAAKwC,uBAAuBf,wBAAwBC,IAAMlC,OAAOmC,aAEvGY,mDACSF,6BAA+B7C,OAAOmC,aAE/CoC,6BAAoBC,EAAKC,UAGbA,EAFejE,KAAK+C,6BACN/C,KAAKsD,6BAInCpD,MAAO,CACHgC,wCACQlC,KAAKkC,uBACAH,WAAU,WACXC,EAAKQ,uBAAyBtB,SAASC,cAAc,2BACrDa,EAAKS,0BAA4BvB,SAASC,cAAc,8BACxDa,EAAKU,mCACLlD,OAAOwB,iBAAiB,SAAUgB,EAAKU,qCAG3ClD,OAAO8B,oBAAoB,SAAUtB,KAAK0C,2CCrFtDwB,UAAU,WAAY,CACzBC,00EAyEAtG,sBACQ,CACJG,KAAM,GAENoG,QAAS,CAAC,KAAM,MAAO,OAAQ,QAAS,SACxCC,aAAc,CACfC,GAAI,KACJC,IAAK,UACLC,KAAM,MACNC,MAAO,QACPC,MAAO,SAGNC,aAAc,CACfL,GAAI,SACJC,IAAK,SACLC,KAAM,OACNC,MAAO,OACPC,MAAO,QAENE,kBAAmB,CACpBN,GAAI,aACJC,IAAK,aACLC,KAAM,aACNC,MAAO,aACPC,MAAO,cAGN3G,cAAc,EAEdU,SAAU,GACVD,WAAY,EAEZK,eAAe,EACfE,mBAAoB,IACpBD,kBAAmB,GACnBgD,uBAAwB,IAExBI,mBAAmB,EACnBiB,wBAAyB,GACzBN,uBAAwB,KAG5BF,SAAU,CACTkC,0BACQ7E,KAAKoE,QAAQxF,QAErBkG,+BACU9E,KAAKZ,WAAW2F,QAAO,SAACC,EAAKlF,EAAQmE,UAC7Ce,EAAIlF,GAAUmE,EAAQ,EACfe,IACH,KAENC,+BACUjF,KAAKkC,kBAAoBlC,KAAK6D,kBAAoB7D,KAAKhC,MAEjEkH,iCACUlF,KAAKkC,kBAAoBlC,KAAK+D,oBAAsB/D,KAAKmF,QAEnEA,gBAAOnB,UACGA,EAAIM,KAGf3E,QAAS,CACR/B,oBAAWwH,GACRxH,EAAWoC,MAAOoF,KAGtBvE,wBACMjD,cAENsC,MAAO,CACNrB,8BACQG,WAAagB,KAAKnB,cAAgBmB,KAAKpC,eAGhDyH,OAAQ,CAACC,EAAYC,EAAUC,EAAWC,EAAevD"}